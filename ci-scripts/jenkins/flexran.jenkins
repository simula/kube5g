/*
#!/bin/groovy
################################################################################
* Copyright 2019-2020 Eurecom and Mosaic5G Platforms Authors
* Licensed to the Mosaic5G under one or more contributor license
* agreements. See the NOTICE file distributed with this
* work for additional information regarding copyright ownership.
* The Mosaic5G licenses this file to You under the
* Apache License, Version 2.0  (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*      http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
################################################################################
#-------------------------------------------------------------------------------
# file          snap-docker-build.jenkins
# brief         Build snap versions of Mosaic5G using different versions of ubuntu (e.g., 16.04 and 18.04) using
# contact       admin@mosaic-5g.io
# authors:
	- Osama Arouk (arouk@eurecom.fr)
	- Alireza Mohammadi (alireza.mohammadi@eurecom.fr)
*-------------------------------------------------------------------------------
*/

// TODO: Add the parameters for ease of edit and access
def pipelineContext = [:] // Parameters will go here

//
def snapName = 'flexran'
def snapChannel = 'edge/ci'
def oaiSnapVersion = 'v1' // v1 or v2
def dockerImageTag = 'v1-cicd'

// Credentials
def gitlabCredentials   = 'mosaic5g_jenkins'
def dockerHubCredentials= 'RegDockerMosaic5g'

// Name of the branch of store to work on
def storeBranchUrl      = 'git@gitlab.eurecom.fr:mosaic5g/store.git'
def storeBranchName     = 'develop' //params.storeRepoBranch

// Node label on which the current pipeline will be executed
def nodeExecutor = 'cigarier'//params.nodeExecutor

// create the directory dirSnapBuildPublish inside which the project store will be cloned, for the purpose of building and puplishing the snaps
def dirSnapBuildPublish = 'snap-build-publish'
pipeline {
    // Here we define the node that will run this script using the labels assigned to them previously
    agent { 
        node { 
            label nodeExecutor
        } 
    }

    // The pipeline will contain a set of stages grouped here, that will run sequentially
    // Each stage itself contains a sequence of steps that may contain some scripts to run
    stages {
        // STAGE #1: Clone the project from git using source control management (scm)
        stage('kube5g-clone') {
            steps {
                checkout scm
            }
        }
        // STAGE 2: PREPARE THE ENVIRONMENT FOR BUILDING THE SNAP
        stage('snap-prepare') {
            steps {
                script{
                    // create the directory dirSnapBuildPublish inside which the project store will be cloned
                    echo "STAGE #2: Prepare the snap environment ${dirSnapBuildPublish}"
                    sh 'echo ${dirSnapBuildPublish}'
                    sh 'echo $dirSnapBuildPublish'
                    sh 'mkdir -p ${dirSnapBuildPublish}'
                    dir("${dirSnapBuildPublish}")
                    {
                        // clone the project from git inside the current directory
                        git credentialsId: '${gitlabCredentials}',
                            url: '${storeBranchUrl}',
                            branch: '${storeBranchName}'

                        
                    }
                    echo "STAGE #1 OUTPUT SUCCESS"
                }
            }
        }
        
        // STAGE 3: BUILD THE SNAP
        stage('snap-build') {
            steps {
                dir("${dirSnapBuildPublish}/snaps"){
                    script{
                        echo "STAGE #3: Building the snap"
                        try{
                            // Set the name, build the snap, get te version, and change the owner user
                            echo "Start building the snap"
                            sh(
                                label: 'building the snap within docker container',
                                script: '''pwd
                                    snap list
                                    export STORE=$WORKSPACE
                                    ########./build-final.sh -n ${snapName} -c all
                                '''
                            )

                            echo "Change the ownership"
                            sh(
                                label: 'change the ownership',
                                script: '''
                                    version=$(grep -m1 version: ${snapName}/snap/snapcraft.yaml | cut -f2 -d: | tr -d "'" | tr -d " ")
                                    ########snap_name=${snapName}"_"$version"_multi.snap"
                                    ########sudo chown -R jenkins:jenkins ${snapName}/$snap_name
                                '''
                            )
                            
                            echo "STAGE #3 OUTPUT SUCCESS"
                        } catch (err) {
                            error("Failed to finish the stage #3, snap build. Check the script output and access rights.")
                        }
                    }
                }
                
                echo "STAGE #3 OUTPUT SUCCESS"
            }
        }

        // STAGE 4: PUSH THE SNAP TO THE CI CHANNEL ON SNAPCRAFT
        stage('snap-push') {
            steps {
                dir('${dirSnapBuildPublish}/snaps'){
                    script{
                        echo "STAGE #4: Publishing the snap to the channel ${snapChannel}"
                        // Push the build to the snap store
                        try{                            
                            sh(
                                label: 'push the snap to channel ${snapChannel}',
                                script: '''
                                    ########./publish-final.sh -s ${snapName} -c ${snapChannel}
                                '''
                            )
                        } catch (err) {
                            error("Failed to finish the stage #4, snap push. Check the script output and access rights.")
                        }
                    }
                }
                
                echo "STAGE #4 OUTPUT SUCCESS"
            }
        }
        
        // STAGE 5: INSTALL THE SNAP FORM THE TEMPORARY CHANNEL
        stage('snap-install') {
            steps {
                script{
                    echo "STAGE #5: Install the snap on the machine, baremetal test"
                    try{
                        // Remove the older versions that maybe present from older usages
                        echo "Remove the older version if present"
                        sh(
                            label: 'remove the snap',
                            script: '''
                                if snap list --all | grep -q ${snapName}; then
                                    sudo snap remove ${snapName}
                                fi
                            '''
                        )

                        // Get and install the snap from the store on the CI channel
                        echo "Install the snap ${snapName} from ${snapChannel} channel"
                        sh(
                            label: 'install the snap from the channel ${snapChannel}',
                            script: '''
                                sudo snap install ${snapName} --devmode --channel=${snapChannel}
                            '''
                        )
                        echo "STAGE #5 OUTPUT SUCCESS"
                    } catch (err) {
                        error("Failed to finish the stage #5. Check if the snap is available.")
                    }
                }
            }
        }

        // STAGE 6: UNIT TEST
        stage('snap-pretest') {
            steps {
                echo "STAGE #6: Testing the snap"
                
                script{
                    try{
                        // Run the check command to test
                        echo "Checking the snap"
                        sh(
                            label: 'check the snap',
                            script: '''
                                sudo ${snapName}.check
                            '''
                        )

                        echo "STAGE #6 OUTPUT SUCCESS"
                    } catch (err) {
                        error("Failed to finish the stage #6. Check the snap logs.")
                    }
                }
            }
        }

        // STAGE 7: CLEAN UP
        stage('snap-clean') {
            steps {
                echo "STAGE #7: Remove the snap"
                
                script{
                    echo "Roll back everything"
                    try{                            
                        sh(
                            label: 'remove the snap',
                            script: '''
                                sudo snap remove ${snapName}
                            '''
                        )
                    
                        echo "STAGE #7 OUTPUT SUCCESS"
                    } catch (err) {
                        error("Failed to finish the stage #7. Check if the snap is correctly installed.")
                    }
                }
            }
        }

        // STAGE 8: BUILDING DOCKER IMAGE FOR THE SNAP FROM THE CHANNEL
        stage('docker-build') {
            steps {
                echo "STEP #8.1 Copy the hook to docker-build before starting building doker image"
                script { 
                    sh label: 'copy dokcer-hook', script: '''pwd
                    cp dockers/docker-hook/cmd/hook/hook dockers/docker-build/build/
                    '''

                }
                echo "STEP #8.2 remove the docker build_base if it is already running"
                script {
                    try {
                        sh label: 'remove the docker container base used to build the docker images', script: '''
                        docker rm --force build_base 
                        '''
                    } catch (err) {
                        echo err.getMessage()
                        echo "Ignoring; the docker container base does not exist"
                    }
                }
                echo "STEP #8.3 start building the docker image for the concerned snaps"
                dir('dockers/docker-build/build'){
                    sh label: 'Build docker image', script: '''
                        ./build.sh ${snapName} ${dockerImageTag} ${oaiSnapVersion}
                    '''
                }
            }
        }
        // STAGE 9: Push the docker image to docker-hub
        stage('docker-Push') {
            steps {
                script { 
                    echo "STEP #9.1 push the docker image tagged as ${dockerImageTag} to docker-hub"
                    sh 'echo "jenkins" | gnome-keyring-daemon -r -d --unlock'
                    docker.withRegistry('https://index.docker.io/v1/', '${dockerHubCredentials}') {
                            docker.image('mosaic5gecosys/${snapName}:${dockerImageTag}').push '${dockerImageTag}'
                            // docker.image('mosaic5gecosys/flexran:v1.test').push()
                        }
                    }
            }
        }
    }
}


