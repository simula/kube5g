// TODO
/*
New added parameters:
- def snapChannel = params.snapChannelCicd
TO be changed: 
- retreive the list of plugs for the snap
*/
/*
#!/bin/groovy
################################################################################
* Copyright 2019-2020 Eurecom and Mosaic5G Platforms Authors
* Licensed to the Mosaic5G under one or more contributor license
* agreements. See the NOTICE file distributed with this
* work for additional information regarding copyright ownership.
* The Mosaic5G licenses this file to You under the
* Apache License, Version 2.0  (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*      http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
################################################################################
#-------------------------------------------------------------------------------
# file          snap-docker-build.jenkins
# brief         Build snap versions of Mosaic5G using different versions of ubuntu (e.g., 16.04 and 18.04) using
# contact       admin@mosaic-5g.io
# authors:
	- Osama Arouk (arouk@eurecom.fr)
	- Alireza Mohammadi (alireza.mohammadi@eurecom.fr)
*-------------------------------------------------------------------------------
*/

// TODO: Add the parameters for ease of edit and access
def pipelineContext = [:] // Parameters will go here

// Name of the snap to build; oai-ran, oai-hss, oai-mme, flexran, etc.
def snapName = params.snapName
// snapcraft channel to which the snap will be pushed for testing it later. This channel is ONLY for testing (i.e., private channel)
def snapChannelCicd = params.snapChannel // params.snapChannelCicd
// snapcraft channel to which the finall version of snap will be pushed. This is the public channel (i.e., private channel)
def snapChannel = params.snapChannel
// This is related to oai-cn versions: v1 and v2
def oaiSnapVersion = params.oaiSnapVersion

// def dockerImageTag =  // 'v1-cicd'
def dockerImageTag = oaiSnapVersion + '-cicd'

// Credentials
def gitlabCredentials   = 'mosaic5g_jenkins'
def dockerHubCredentials= 'RegDockerMosaic5g'

// Name of the branch of store to work on
def storeBranchUrl      = 'git@gitlab.eurecom.fr:mosaic5g/store.git'
def storeBranchName     = 'develop' //params.storeRepoBranch

// Node label on which the current pipeline will be executed
def nodeExecutor = params.nodeExecutor
// def nodeExecutor = 'cigarier'//params.nodeExecutor

// create the directory dirSnapBuildPublish inside which the project store will be cloned, for the purpose of building and puplishing the snaps
def dirSnapBuildPublish = 'snap-build-publish'
// monolithic mode
def dockerComposeLteMonolithicV1 = "dockers/docker-compose/oai-v1/lte-all-in-one"
def dockerComposeLteMonolithicV2 = "dockers/docker-compose/oai-v2/lte-all-in-one"
def dockerComposeLteMonolithicFlexranV1 = "dockers/docker-compose/oai-v1/lte-all-in-one-with-flexran"
def dockerComposeLteMonolithicFlexranV2 = "dockers/docker-compose/oai-v2/lte-all-in-one-with-flexran"
// disaggregated mode
def dockerComposeLteDisaggregatedV1 = "dockers/docker-compose/oai-v1/lte"
def dockerComposeLteDisaggregatedV2 = "dockers/docker-compose/oai-v2/lte"
def dockerComposeLteDisaggregatedFlexranV1 = "dockers/docker-compose/oai-v1/lte-with-flexran"
def dockerComposeLteDisaggregatedFlexranV2 = "dockers/docker-compose/oai-v2/lte-with-flexran"


// Name of docker image for the concerned snap. it is the same as the snap name but without hyphen (-) 
def dockerEntityName = ""
String[] str;
str = (params.snapName).split('-')
for( String values : str ){
    dockerEntityName = dockerEntityName + values
}

pipeline {
    // Here we define the node that will run this script using the labels assigned to them previously
    agent { 
        node { 
            label nodeExecutor
        } 
    }
    environment {
        SNAP_NAME           = "${snapName}"
        DOCKER_ENTITY_NAME  = "${dockerEntityName}"
        SNAP_CHANNEL_CICD   = "${snapChannelCicd}"
        SNAP_CHANNEL        = "${snapChannel}"
        OAI_SNAP_VERSION    = "${oaiSnapVersion}"
        DOCKER_IMAGE_TAG    = "${dockerImageTag}"
        ENUM_STAGE          = 1
    }


    // The pipeline will contain a set of stages grouped here, that will run sequentially
    // Each stage itself contains a sequence of steps that may contain some scripts to run
    stages {
        // STAGE #1: Clone the project from git using source control management (scm)
        stage('clone') {
            steps {
                checkout scm
            }
        }
        // STAGE #2: Configure Kube5G for CICD phase
        stage('kube5g-configure') {
            steps {
                echo "STAGE #1: Configure Kube5G for CICD phase"
                dir('common/config-manager'){
                    script{
                        try{
                            sh(
                                label: 'Update Kube5G to proceed with ${SNAP_NAME} in CICD',
                                script: '''
                                    
                                    git checkout develop # TO be deleted when getting the code from develop branch
                                    git pull  # TO be deleted when getting the code from develop branch
                                    ./conf-manager.py -s conf_short_default.yaml -C ${SNAP_NAME}
                                '''
                            )
                            currentStage.result = 'SUCCESS'
                        } catch (err) {
                            echo err.getMessage()
                            error("Failed to configure Kube5G using config manager. Check the script output and access rights.")
                            currentStage.result = 'FAILURE'
                        }
                    }
                }
                echo "STAGE #2 OUTPUT ${currentStage.result}"
            }
        }
        // STAGE #3: Pull the store from gitlab to temporary directory dirSnapBuildPublish to start building the concerned snap in the following stages/steps
        stage('snap-prepare') {
            steps {
                echo "STAGE #3: Pull store to temporary directory ${dirSnapBuildPublish}"
                script{
                    // create the directory dirSnapBuildPublish inside which the project store will be cloned
                    echo "STEP #3.1: Prepare the snap environment ${dirSnapBuildPublish}"
                    try{
                        sh "mkdir -p ${dirSnapBuildPublish}"
                        dir("${dirSnapBuildPublish}")
                        {
                            // clone the project from git inside the current directory
                            git credentialsId: "${gitlabCredentials}",
                                url: "${storeBranchUrl}",
                                branch: "${storeBranchName}"
                        }
                        currentStage.result = 'SUCCESS'
                    } catch (err) {
                        echo err.getMessage()
                        error("Failed to clone store from gitlab. Check the script output and access rights.")
                        currentStage.result = 'FAILURE'
                    }
                    echo "STAGE #3 OUTPUT ${currentStage.result}"
                }
            }
        }
        
        // STAGE 4: Build the snap
        stage('snap-build') {
            steps {
                dir("${dirSnapBuildPublish}/snaps"){
                    script{
                        echo "STAGE #4: Building the snap"
                        try{
                            echo "STEP #4.1: Start building the snap"
                            sh(
                                label: "building the snap within docker container",
                                script: '''pwd
                                    snap list
                                    export STORE=$WORKSPACE
                                    ########./build-final.sh -n ${SNAP_NAME} -c all
                                '''
                            )

                            try{
                                echo "STEP #4.2: Change the ownership of the build snap"
                                sh(
                                    label: "change the ownership",
                                    script: '''
                                        echo ${SNAP_NAME}
                                        echo $SNAP_NAME
                                        version=$(grep -m1 version: ${SNAP_NAME}/snap/snapcraft.yaml | cut -f2 -d: | tr -d "'" | tr -d " ")
                                        ########snap_name=${SNAP_NAME}"_"$version"_multi.snap"
                                        ########sudo chown -R jenkins:jenkins ${SNAP_NAME}/$snap_name
                                    '''
                                )
                                currentStage.result = 'SUCCESS'
                            } catch (err) {
                                echo err.getMessage()
                                error("Failed to change the owner of the built snap ${SNAP_NAME}. Check the script output and access rights.")
                                currentStage.result = 'FAILURE'
                            }
                        } catch (err) {
                            echo err.getMessage()
                            error("Failed to build the snap ${SNAP_NAME}. Check the script output and access rights.")
                            currentStage.result = 'FAILURE'
                        }
                    }
                }
                echo "STAGE #4 OUTPUT ${currentStage.result}"
            }
        }

        // STAGE: Push the snap to the CICD channel on snapcraft
        stage('snap-push-cicd') {
            steps {
                dir("${dirSnapBuildPublish}/snaps"){
                    script{
                        echo "STAGE #5: Publishing the snap to the channel ${SNAP_CHANNEL_CICD}"
                        try{                            
                            sh(
                                label: "push the snap to channel ${SNAP_CHANNEL_CICD}",
                                script: '''
                                    ########./publish-final.sh -s ${SNAP_NAME} -c ${SNAP_CHANNEL_CICD}
                                '''
                            )
                            currentStage.result = 'SUCCESS'
                        } catch (err) {
                            echo err.getMessage()
                            error("Failed to push the snap ${SNAP_NAME} to the channel ${SNAP_CHANNEL_CICD}. Check the script output and access rights.")
                            currentStage.result = 'FAILURE'
                        }
                    }
                }
                echo "STAGE #5 OUTPUT ${currentStage.result}"
            }
        }
        
        // STAGE 6: INSTALL THE SNAP FORM THE TEMPORARY CHANNEL
        stage('snap-install') {
            steps {
                script{
                    echo "STAGE #6: Install the snap on the machine, baremetal test, from the cicd channel on snapcraft"
                    try{
                        // Remove the older versions that maybe present from older usages
                        echo "Remove the older version if present"
                        // sh "if snap list --all | grep -q $SNAP_NAME; then \n sudo snap remove $SNAP_NAME \n fi"
                        sh(
                            label: "remove the snap",
                            script: '''
                                if snap list --all | grep -q $SNAP_NAME; then
                                    sudo snap remove $SNAP_NAME
                                fi
                            '''
                        )

                        // Get and install the snap from the store on the CI channel
                        echo "Install the snap ${SNAP_NAME} from ${SNAP_CHANNEL_CICD} channel"
                        try{
                            sh(
                                label: "install the snap from the channel ${SNAP_CHANNEL_CICD}",
                                script: '''
                                    sudo snap install ${SNAP_NAME} --devmode --channel=${SNAP_CHANNEL_CICD}
                                '''
                            )
                            currentStage.result = 'SUCCESS'
                        } catch (err) {
                            echo err.getMessage()
                            error("Failed to install the snap ${SNAP_NAME} from the channel ${SNAP_CHANNEL_CICD}")
                            currentStage.result = 'FAILURE'
                        }
                    } catch (err) {
                        echo err.getMessage()
                        error("Failed to remove the previously installed snap.")
                    }
                    echo "STAGE #6 OUTPUT ${currentStage.result}"
                }
            }
        }

        // STAGE 7: UNIT TEST
        stage('snap-unitary-test') {
            steps {
                echo "STAGE #6: Testing the snap on baremetal"
                script{
                    echo "Checking the snap ${SNAP_NAME}.check"
                    try{
                        // Run the check command to test
                        echo "Checking the snap $SNAP_NAME"
                        // sh "sudo $SNAP_NAME.check"
                        sh(
                            label: "check the snap",
                            script: '''
                                sudo snap connect $SNAP_NAME:log-observe
                                sudo snap connect $SNAP_NAME:process-control
                                sudo $SNAP_NAME.check
                            '''
                        )
                        currentStage.result = 'SUCCESS'
                    } catch (err) {
                        echo err.getMessage()
                        try{
                            // Run the check command to test
                            echo "Testing the snap $SNAP_NAME"
                            sh(
                                label: "check the snap",
                                script: '''
                                    sudo $SNAP_NAME.test
                                '''
                            )
                            currentStage.result = 'SUCCESS'
                        } catch (errSecond) {
                            echo errSecond.getMessage()
                            error("Failed in the unitary test for the snap ${SNAP_NAME}")
                            currentStage.result = 'FAILURE'
                        }
                    }
                    echo "STAGE #7 OUTPUT ${currentStage.result}"
                }
            }
        }

        // STAGE 8: CLEAN UP
        stage('snap-clean') {
            steps {
                echo "STAGE #78: Remove the snap"
                script{
                    echo "Roll back everything"
                    try{                            
                        sh(
                            label: "remove the snap",
                            script: '''
                                sudo snap remove ${SNAP_NAME}
                            '''
                        )
                        currentStage.result = 'SUCCESS'
                    } catch (err) {
                        echo err.getMessage()
                        error("Failed to remove the snap ${SNAP_NAME}. Check if the snap was previously (correctly) installed.")
                        currentStage.result = 'FAILURE'
                    }
                    echo "STAGE #8 OUTPUT ${currentStage.result}"
                }
            }
        }

        // STAGE #9: BUILDING DOCKER IMAGE FOR THE SNAP FROM THE CHANNEL
        stage('docker-build') {
            steps {
                echo "STEP #9.1 Copy the hook to docker-build before starting building doker image"
                try {
                    script { 
                        sh label: 'copy dokcer-hook', script: '''pwd
                        cp dockers/docker-hook/cmd/hook/hook dockers/docker-build/build/
                        '''
                    }
                } catch (err) {
                    echo err.getMessage()
                    echo "Error of getting the hook, exit..."
                    currentBuild.result = 'FAILURE'
                    throw(err)
                }
                echo "STEP #9.2 remove the docker build_base if it is already running"
                script {
                    try {
                        sh label: 'remove the docker container base used to build the docker images', script: '''
                        docker rm --force build_base 
                        '''
                    } catch (err) {
                        echo err.getMessage()
                        echo "Ignoring; the docker container base does not exist"
                    }
                }
                echo "STEP #9.3 start building the docker image for the concerned snap"
                try {
                    dir('dockers/docker-build/build'){
                        sh label: 'Build docker image', script: '''
                            ./build.sh ${SNAP_NAME} ${DOCKER_IMAGE_TAG} ${OAI_SNAP_VERSION}
                        '''
                    }
                    currentStage.result = 'SUCCESS'
                } catch (err) {
                    echo err.getMessage()
                    echo "Erro building docker image for the snap ${SNAP_NAME}, exit..."
                    currentBuild.result = 'FAILURE'
                    throw(err)
                }
                echo "STAGE #9 OUTPUT ${currentStage.result}"
            }
        }
        // STAGE 10: Push the docker image to docker-hub
        stage('docker-Push') {
            steps {
                try {
                    script { 
                    echo "STEP #10.1 push the docker image tagged as ${DOCKER_IMAGE_TAG} to docker-hub"
                    sh 'echo "jenkins" | gnome-keyring-daemon -r -d --unlock'
                    docker.withRegistry('https://index.docker.io/v1/', "${dockerHubCredentials}") {
                            docker.image("mosaic5gecosys/${DOCKER_ENTITY_NAME}:${DOCKER_IMAGE_TAG}").push "${DOCKER_IMAGE_TAG}"
                            // docker.image("mosaic5gecosys/${DOCKER_ENTITY_NAME}:${DOCKER_IMAGE_TAG}").push()
                        }
                    }
                    currentStage.result = 'SUCCESS'
                } catch (err) {
                    echo err.getMessage()
                    echo "Erro pushing the docker image mosaic5gecosys/${DOCKER_ENTITY_NAME}:${DOCKER_IMAGE_TAG} to dockerhub, exit..."
                    currentBuild.result = 'FAILURE'
                    throw(err)
                }
                echo "STAGE #10 OUTPUT ${currentStage.result}"
            }
        }
        
        /*=========== Continuous deployment: lte network with monolithic RAN and CN, and flexran as controller:v1 ===========*/
        // STAGE #11: DOCKER COMPOSE
        stage('monolithic-flexran-v1') {
            when{
                anyOf{
                    expression{env.SNAP_NAME == 'flexran'}
                    expression{env.SNAP_NAME == 'oai-ran'}
                }
            }
            steps {
                echo "STEP #11.1 Build the docker hook"
                // Change the directory to an specific one for the compose
                dir("${dockerComposeLteMonolithicFlexranV1}"){
                    echo "STEP #11.2 bring the network down if it is already up"
                    script{
                        try{
                            // Remove the docker-compose if available
                            echo "Remove the docker-compose"
                            sh(
                                label: 'remove the docker compose if it is previously deployed',
                                script: '''
                                    docker-compose down
                                '''
                            )
                            currentStage.result = 'SUCCESS'
                        } catch (err) {
                            echo err.getMessage()
                            error("Failed to make the network down. Check the docker compse.")
                            currentStage.result = 'FAILURE'
                        }
                    }
                    script{
                        try{
                            // Setup the docker-compse
                            echo "Running the docker-compose"
                            sh(
                                label: 'setup the docker-compose',
                                script: '''
                                    docker-compose up -d
                                '''
                            )
                            currentStage.result = 'SUCCESS'
                        } catch (err) {
                            echo err.getMessage()
                            error("Failed to make the network up. Check the docker compse.")
                            currentStage.result = 'FAILURE'
                        }   
                    }
                }

                echo "STAGE #11 OUTPUT ${currentStage.result}"
            }
        }
        
        // STAGE #12: DOCKER COMPOSE TEST
        stage('monolithic-flexran-network-test-v1') {
            when{
                anyOf{
                    expression{env.SNAP_NAME == 'flexran'}
                    expression{env.SNAP_NAME == 'oai-ran'}
                }
            }
            steps {
                echo "STEP #12.1 Test lte with flexran network"
                // Change the directory to an specific one for the compose
                dir("${dockerComposeLteMonolithicFlexranV1}"){
                    script{
                        try{
                            // List and check the containers and snaps
                            echo "Listing the containers and snaps"
                            sh(
                                label: 'list the docker containers to see the deployed networks',
                                script: '''
                                    # Sleep  for 10 seconds to make sure that the network is up
                                    sleep 10
                                    docker ps
                                    docker network ls
                                    
                                    cmd="snap list"
                                    cmd_info_cn="snap info oai-cn"
                                    cmd_info_ran="snap info oai-ran"
                                    cmd_info_flexran="snap info flexran"
                    
                                    docker exec oaicn $cmd
                                    docker exec oaicn $cmd_info_cn

                                    docker exec oairan $cmd
                                    docker exec oairan $cmd_info_ran

                                    docker exec flexran $cmd
                                    docker exec flexran $cmd_info_flexran

                                    cmd_log_observe="snap connect flexran:log-observe" 
                                    cmd_process_control="snap connect flexran:process-control" 
                                    docker exec ${DOCKER_ENTITY_NAME} $cmd_log_observe
                                    docker exec ${DOCKER_ENTITY_NAME} $cmd_process_control
                                '''
                            )
                            currentStage.result = 'SUCCESS'
                        } catch (err){
                            error("Failed to test the network components in monolithic mode; v1")
                            currentStage.result = 'FAILURE'
                        }
                    }
                }
                echo "STAGE #12 OUTPUT ${currentStage.result}"
            }
        }
        
        // STAGE #13: DOCKER COMPOSE
        stage('deployment-unit-test-flexran-v1') {
            when{
                expression{env.SNAP_NAME == 'flexran'}
            }
            steps {
                // Change the directory to an specific one for the scripts
                echo "STEP #13.1: Perform a unit test of flexran"
                dir('ci-scripts/unit-tests/flexran/4G'){
                    script{
                        try{
                            // Unit test script
                            echo "Unit test script"
                            sh(
                                label: '${SNAP_NAME} unit test script',
                                script: '''
                                    chmod 777 unit-flexran.sh
                                    ./unit-flexran.sh
                                '''
                            )
                            currentStage.result = 'SUCCESS'
                        } catch (err) {
                            echo err.getMessage()
                            error("Failed to test flexran in the deployment stage. Check the script output.")
                            currentStage.result = 'FAILURE'
                        }
                    }
                }
                
                echo "STEP #13.2: Perform ${SNAP_NAME} check"
                script{
                    try{
                        // Snap unit check
                        echo "Snap unit check"
                        sh(
                            label: "${SNAP_NAME} snap unit check",
                            script: '''
                                docker exec ${DOCKER_ENTITY_NAME} ${SNAP_NAME}.check
                            '''
                        )
                        currentStage.result = 'SUCCESS'
                    } catch (err) {
                        echo err.getMessage()
                        try{
                            // Snap unit test
                            echo "Snap unit test"
                            sh(
                                label: "${SNAP_NAME} snap unit test",
                                script: '''
                                    docker exec ${DOCKER_ENTITY_NAME} ${SNAP_NAME}.test
                                '''
                            )
                            currentStage.result = 'SUCCESS'
                        } catch (errSecond) {
                            echo errSecond.getMessage()
                            error("Failed of the unitary test of FlexRAN insider the docker container")
                            currentStage.result = 'FAILURE'
                        }
                    }
                }
                echo "STAGE #13 OUTPUT ${currentStage.result}"
            }
        }
        
        // STAGE 14: DOCKER COMPOSE CLEAN
        stage('monolithic-flexran-down-v1') {
            when{
                anyOf{
                    expression{env.SNAP_NAME == 'flexran'}
                    expression{env.SNAP_NAME == 'oai-ran'}
                }
            }
            steps {
                echo "STEP #14.1: Rollback the docker-compse"
                // Change the directory to an specific one for the compose
                dir("${dockerComposeLteMonolithicFlexranV1}"){
                    script{
                        try{
                            // Rollback
                            echo "Shutting down the docker-compose"
                            sh(
                                label: 'list the docker containers to see the deployed networks',
                                script: '''
                                    docker-compose down
                                '''
                            )
                            currentStage.result = 'SUCCESS'
                        } catch (err){
                            error("Failed to make the network down. Check the docker-compose output")
                            currentStage.result = 'FAILURE'

                        }
                    }
                }
                echo "STAGE #14 OUTPUT ${currentStage.result}"
            }
        }
        /*=========== Continuous deployment: lte network with monolithic RAN and CN, and flexran as controller:v2 ===========*/
        // STAGE #15: DOCKER COMPOSE
        stage('monolithic-flexran-deploy-v2') {
            when{
                anyOf{
                    expression{env.SNAP_NAME == 'flexran'}
                    expression{env.SNAP_NAME == 'oai-ran'}
                }
            }
            steps {
                echo "STEP #15.1 Build the docker hook"
                // Change the directory to an specific one for the compose
                dir("${dockerComposeLteMonolithicFlexranV2}"){
                    echo "STEP #15.2 bring the network down if it is already up"
                    script{
                        try{
                            // Remove the docker-compose if available
                            echo "Remove the docker-compose"
                            sh(
                                label: 'remove the docker compose if it is previously deployed',
                                script: '''
                                    docker-compose down
                                '''
                            )
                            currentStage.result = 'SUCCESS'
                        } catch (err) {
                            echo err.getMessage()
                            error("Failed make the network down. Check the docker compse.")
                            currentStage.result = 'FAILURE'
                        }
                    }
                    script{
                        try{
                            // Setup the docker-compse
                            echo "Running the docker-compose"
                            sh(
                                label: 'setup the docker-compose',
                                script: '''
                                    docker-compose up -d
                                '''
                            )
                            currentStage.result = 'SUCCESS'
                        } catch (err) {
                            echo err.getMessage()
                            error("Failed make the netwrok up. Check docker-compose.yaml and conf.yaml")
                            currentStage.result = 'FAILURE'
                        }   
                    }
                }
                echo "STAGE #15 OUTPUT ${currentStage.result}"
            }
        }
        
        // STAGE #16: DOCKER COMPOSE TEST
        stage('monolithic-flexran-network-test-v2') {
            when{
                anyOf{
                    expression{env.SNAP_NAME == 'flexran'}
                    expression{env.SNAP_NAME == 'oai-ran'}
                }
            }
            steps {
                echo "STEP #16.1 Test lte with flexran network"
                // Change the directory to an specific one for the compose
                dir("${dockerComposeLteMonolithicFlexranV2}"){
                    script{
                        try{
                            // List and check the containers and snaps
                            echo "Listing the containers and snaps"
                            sh(
                                label: 'list the docker containers to see the deployed networks',
                                script: '''
                                    # Sleep  for 10 seconds to make sure that the network is up
                                    sleep 10
                                    docker ps
                                    docker network ls
                                    
                                    cmd="snap list"
                                    cmd_info_cn="snap info oai-cn"
                                    cmd_info_ran="snap info oai-ran"
                                    cmd_info_flexran="snap info flexran"
                    
                                    docker exec oaicn $cmd
                                    docker exec oaicn $cmd_info_cn

                                    docker exec oairan $cmd
                                    docker exec oairan $cmd_info_ran

                                    docker exec flexran $cmd
                                    docker exec flexran $cmd_info_flexran
                                    cmd_log_observe="snap connect flexran:log-observe" 
                                    cmd_process_control="snap connect flexran:process-control" 
                                    docker exec ${DOCKER_ENTITY_NAME} $cmd_log_observe
                                    docker exec ${DOCKER_ENTITY_NAME} $cmd_process_control
                                '''
                            )
                            currentStage.result = 'SUCCESS'
                        } catch (err){
                            error("Failed to test the network in monolithic mode with FlexRAN: v2")
                            currentStage.result = 'FAILURE'
                        }
                    }
                }

                echo "STAGE #16 OUTPUT ${currentStage.result}"
            }
        }
        
        // STAGE #17: DOCKER COMPOSE
        stage('deployment-unit-test-flexran-v2') {
            when{
                expression{env.SNAP_NAME == 'flexran'}
            }
            steps {
                
                // Change the directory to an specific one for the scripts
                echo "STEP #17.1: Perform a unit test of flexran"
                dir('ci-scripts/unit-tests/flexran/4G'){
                    script{
                        try{
                            // Unit test script
                            echo "Unit test script"
                            sh(
                                label: '${SNAP_NAME} unit test script',
                                script: '''
                                    chmod 777 unit-flexran.sh
                                    ./unit-flexran.sh
                                '''
                            )
                            currentStage.result = 'SUCCESS'
                        } catch (err) {
                            echo err.getMessage()
                            error("Failed to finish the stage #10. Check the script output.")
                            currentStage.result = 'FAILURE'
                        }
                    }
                }
                
                echo "STEP #17.2: Perform ${SNAP_NAME} check"
                script{
                    try{
                        // Snap unit check
                        echo "Snap unit check"
                        sh(
                            label: "${SNAP_NAME} snap unit check",
                            script: '''
                                docker exec ${DOCKER_ENTITY_NAME} ${SNAP_NAME}.test
                            '''
                        )
                        currentStage.result = 'SUCCESS'
                    } catch (err) {
                        echo err.getMessage()
                        try{
                            // Snap unit check
                            echo "Snap unit check"
                            sh(
                                label: "${SNAP_NAME} snap unit check",
                                script: '''
                                    docker exec ${DOCKER_ENTITY_NAME} ${SNAP_NAME}.check
                                '''
                            )
                            currentStage.result = 'SUCCESS'
                        } catch (errSecond) {
                            echo errSecond.getMessage()
                            error("Failed to perform check for the snap ${SNAP_NAME}")
                            currentStage.result = 'FAILURE'
                        }
                    }
                }

                echo "STAGE #17 OUTPUT ${currentStage.result}"
            }
        }
        
        // STAGE 18: DOCKER COMPOSE CLEAN
        stage('monolithic-flexran-down-v2') {
            when{
                anyOf{
                    expression{env.SNAP_NAME == 'flexran'}
                    expression{env.SNAP_NAME == 'oai-ran'}
                }
            }
            steps {
                echo "STEP #18.1: Rollback the docker-compse"
                // Change the directory to an specific one for the compose
                dir("${dockerComposeLteMonolithicFlexranV2}"){
                    script{
                        try{
                            // Rollback
                            echo "Shutting down the docker-compose"
                            sh(
                                label: 'list the docker containers to see the deployed networks',
                                script: '''
                                    docker-compose down
                                '''
                            )
                            currentStage.result = 'SUCCESS'
                        } catch (err){
                            error("Failed make the network down. Check the docker-compose")
                            currentStage.result = 'FAILURE'
                        }
                    }
                }
                echo "STAGE #18 OUTPUT ${currentStage.result}"
            }
        }
        
        /*=========== Continuous deployment: lte network with monolithic RAN and CN:v1 ===========*/
        // STAGE #18: DOCKER COMPOSE
        stage('monolithic-deploy-v1') {
            when{
                anyOf{
                    expression{env.SNAP_NAME == 'oai-ran'}
                    expression{env.SNAP_NAME == 'oai-cn'}
                }
            }
            steps {
                echo "STEP #18.1 Build the docker hook"
                // Change the directory to an specific one for the compose
                dir("${dockerComposeLteMonolithicV1}"){
                    echo "STEP #18.2 bring the network down if it is already up"
                    script{
                        try{
                            // Remove the docker-compose if available
                            echo "Remove the docker-compose"
                            sh(
                                label: 'remove the docker compose if it is previously deployed',
                                script: '''
                                    docker-compose down
                                '''
                            )
                            currentStage.result = 'SUCCESS'
                        } catch (err) {
                        echo err.getMessage()
                            error("Failed to make the network down. Check the docker compse.")
                            currentStage.result = 'FAILURE'
                        }
                    }
                    script{
                        try{
                            // Setup the docker-compse
                            echo "Running the docker-compose"
                            sh(
                                label: 'setup the docker-compose',
                                script: '''
                                    docker-compose up -d
                                '''
                            )
                            currentStage.result = 'SUCCESS'
                        } catch (err) {
                        echo err.getMessage()
                            error("Failed to make the network up. Check docker-compose.yaml and conf.yaml")
                            currentStage.result = 'FAILURE'
                        }   
                    }
                }
                echo "STAGE #18 OUTPUT ${currentStage.result}"
            }
        }
        
        // STAGE #19: DOCKER COMPOSE TEST
        stage('monolithic-network-test-v1') {
            when{
                anyOf{
                    expression{env.SNAP_NAME == 'oai-ran'}
                    expression{env.SNAP_NAME == 'oai-cn'}
                }
            }
            steps {
                echo "STEP #19.1 Test lte network: monolithic mode"
                // Change the directory to an specific one for the compose
                dir("${dockerComposeLteMonolithicV1}"){
                    script{
                        try{
                            // List and check the containers and snaps
                            echo "Listing the containers and snaps"
                            sh(
                                label: 'list the docker containers to see the deployed networks',
                                script: '''
                                    # Sleep  for 10 seconds to make sure that the network is up
                                    sleep 10
                                    docker ps
                                    docker network ls
                                    
                                    cmd="snap list"
                                    cmd_info_cn="snap info oai-cn"
                                    cmd_info_ran="snap info oai-ran"
                    
                                    docker exec oaicn $cmd
                                    docker exec oaicn $cmd_info_cn

                                    docker exec oairan $cmd
                                    docker exec oairan $cmd_info_ran
                                '''
                            )
                            currentStage.result = 'SUCCESS'
                        } catch (err){
                            error("Failed to test the network in monolithic mode. Check the modules.")
                            currentStage.result = 'FAILURE'
                        }
                    }
                }
                echo "STAGE #19 OUTPUT ${currentStage.result}"
            }
        }
        
        // STAGE 18: DOCKER COMPOSE CLEAN
        stage('monolithic-down-v1') {
            when{
                anyOf{
                    expression{env.SNAP_NAME == 'oai-ran'}
                    expression{env.SNAP_NAME == 'oai-cn'}
                }
            }
            steps {
                echo "STEP #18.1: Rollback the docker-compse"
                // Change the directory to an specific one for the compose
                dir("${dockerComposeLteMonolithicV1}"){
                    script{
                        try{
                            // Rollback
                            echo "Shutting down the docker-compose"
                            sh(
                                label: 'list the docker containers to see the deployed networks',
                                script: '''
                                    docker-compose down
                                '''
                            )
                            currentStage.result = 'SUCCESS'
                        } catch (err){
                            error("Failed to make the network, monolithic mode, down. Check the docker-compose")
                            currentStage.result = 'FAILURE'
                        }
                    }
                }
                echo "STAGE #18 OUTPUT ${currentStage.result}"
            }
        }

        /*=========== Continuous deployment: lte network with monolithic RAN and CN:v2 ===========*/
        // STAGE #19: DOCKER COMPOSE
        stage('monolithic-deploy-v2') {
            when{
                anyOf{
                    expression{env.SNAP_NAME == 'oai-ran'}
                    expression{env.SNAP_NAME == 'oai-cn'}
                }
            }
            steps {
                echo "STEP #19.1 Build the docker hook"
                // Change the directory to an specific one for the compose
                dir("${dockerComposeLteMonolithicV2}"){
                    echo "STEP #19.2 bring the network down if it is already up"
                    script{
                        try{
                            // Remove the docker-compose if available
                            echo "Remove the docker-compose"
                            sh(
                                label: 'remove the docker compose if it is previously deployed',
                                script: '''
                                    docker-compose down
                                '''
                            )
                            currentStage.result = 'SUCCESS'
                        } catch (err) {
                        echo err.getMessage()
                            error("Failed to make the network down. Check the docker compse.")
                            currentStage.result = 'FAILURE'
                        }
                    }
                    script{
                        try{
                            // Setup the docker-compse
                            echo "Running the docker-compose"
                            sh(
                                label: 'setup the docker-compose',
                                script: '''
                                    docker-compose up -d
                                '''
                            )
                            currentStage.result = 'SUCCESS'
                        } catch (err) {
                        echo err.getMessage()
                            error("Failed to make the network up. Check docker-compose.yaml and conf.yaml")
                            currentStage.result = 'FAILURE'
                        }   
                    }
                }
                echo "STAGE #19 OUTPUT ${currentStage.result}"
            }
        }
        
        // STAGE #20: DOCKER COMPOSE TEST
        stage('monolithic-network-test-v2') {
            when{
                anyOf{
                    expression{env.SNAP_NAME == 'oai-ran'}
                    expression{env.SNAP_NAME == 'oai-cn'}
                }
            }
            steps {
                echo "STEP #20.1 Test lte network: monolithic mode"
                // Change the directory to an specific one for the compose
                dir("${dockerComposeLteMonolithicV2}"){
                    script{
                        try{
                            // List and check the containers and snaps
                            echo "Listing the containers and snaps"
                            sh(
                                label: 'list the docker containers to see the deployed networks',
                                script: '''
                                    # Sleep  for 10 seconds to make sure that the network is up
                                    sleep 10
                                    docker ps
                                    docker network ls
                                    
                                    cmd="snap list"
                                    cmd_info_cn="snap info oai-cn"
                                    cmd_info_ran="snap info oai-ran"
                    
                                    docker exec oaicn $cmd
                                    docker exec oaicn $cmd_info_cn

                                    docker exec oairan $cmd
                                    docker exec oairan $cmd_info_ran
                                '''
                            )
                            currentStage.result = 'SUCCESS'
                        } catch (err){
                            error("Failed to test the network in monolithic mode v2")
                            currentStage.result = 'FAILURE'
                        }
                    }
                }

                echo "STAGE #20 OUTPUT ${currentStage.result}"
            }
        }
        
        // STAGE 21: DOCKER COMPOSE CLEAN
        stage('monolithic-down-v2') {
            when{
                anyOf{
                    expression{env.SNAP_NAME == 'oai-ran'}
                    expression{env.SNAP_NAME == 'oai-cn'}
                }
            }
            steps {
                echo "STEP #21.1: Rollback the docker-compse"
                // Change the directory to an specific one for the compose
                dir("${dockerComposeLteMonolithicV2}"){
                    script{
                        try{
                            // Rollback
                            echo "Shutting down the docker-compose"
                            sh(
                                label: 'list the docker containers to see the deployed networks',
                                script: '''
                                    docker-compose down
                                '''
                            )
                            currentStage.result = 'SUCCESS'
                        } catch (err){
                            error("Failed to make the network down. Check the docker-compose")
                            currentStage.result = 'FAILURE'
                        }
                    }
                }

                echo "STAGE #21 OUTPUT ${currentStage.result}"
            }
        }

        /*=========== Continuous deployment: lte network with monolithic RAN and disaggregated CN:v1 ===========*/
        // STAGE #22: DOCKER COMPOSE
        stage('disaggregated-deploy-v1') {
            when{
                allOf{
                    anyOf{
                        expression{env.SNAP_NAME == 'oai-ran'}
                        expression{env.SNAP_NAME == 'oai-hss'}
                        expression{env.SNAP_NAME == 'oai-mme'}
                        expression{env.SNAP_NAME == 'oai-spgw'}
                    }
                    expression{env.OAI_SNAP_VERSION == 'v1'}
                }
            }
            steps {
                echo "STEP #22.1 Build the docker hook"
                // Change the directory to an specific one for the compose
                dir("${dockerComposeLteDisaggregatedV1}"){
                    echo "STEP #22.2 bring the network down if it is already up"
                    script{
                        try{
                            // Remove the docker-compose if available
                            echo "Remove the docker-compose"
                            sh(
                                label: 'remove the docker compose if it is previously deployed',
                                script: '''
                                    docker-compose down
                                '''
                            )
                            currentStage.result = 'SUCCESS'
                        } catch (err) {
                        echo err.getMessage()
                            error("Failed to make the network, disaggregated mode v1, down. Check the docker compse.")
                            currentStage.result = 'FAILURE'
                        }
                    }
                    script{
                        try{
                            // Setup the docker-compse
                            echo "Running the docker-compose"
                            sh(
                                label: 'setup the docker-compose',
                                script: '''
                                    docker-compose up -d
                                '''
                            )
                            currentStage.result = 'SUCCESS'
                        } catch (err) {
                        echo err.getMessage()
                            error("Failed to make the network, disaggregated mode v1, up. Check the docker compse.")
                            currentStage.result = 'FAILURE'
                        }   
                    }
                }
                echo "STAGE #22 OUTPUT ${currentStage.result}"
            }
        }
        
        // STAGE #23: DOCKER COMPOSE TEST
        stage('disaggregated-network-test-v1') {
            when{
                allOf{
                    anyOf{
                        expression{env.SNAP_NAME == 'oai-ran'}
                        expression{env.SNAP_NAME == 'oai-hss'}
                        expression{env.SNAP_NAME == 'oai-mme'}
                        expression{env.SNAP_NAME == 'oai-spgw'}
                    }
                    expression{env.OAI_SNAP_VERSION == 'v1'}
                }
            }
            steps {
                echo "STEP #23.1 Test lte network: disaggregated mode"
                // Change the directory to an specific one for the compose
                dir("${dockerComposeLteDisaggregatedV1}"){
                    script{
                        try{
                            // List and check the containers and snaps
                            echo "Listing the containers and snaps"
                            sh(
                                label: 'list the docker containers to see the deployed networks',
                                script: '''
                                    # Sleep  for 10 seconds to make sure that the network is up
                                    sleep 10
                                    docker ps
                                    docker network ls
                                    
                                    cmd="snap list"
                                    cmd_info_ran="snap info oai-ran"
                                    cmd_info_hss="snap info oai-cn"
                                    cmd_info_mme="snap info oai-cn"
                                    cmd_info_spgw="snap info oai-cn"

                                    docker exec oaihss $cmd
                                    docker exec oaihss $cmd_info_hss

                                    docker exec oaimme $cmd
                                    docker exec oaimme $cmd_info_mme

                                    docker exec oaispgw $cmd
                                    docker exec oaispgw $cmd_info_spgw

                                    docker exec oairan $cmd
                                    docker exec oairan $cmd_info_ran
                                '''
                            )
                            currentStage.result = 'SUCCESS'
                        } catch (err){
                            error("Failed to test the network in dissagregated mode v1. Check the modules.")
                            currentStage.result = 'FAILURE'
                        }
                    }
                }

                echo "STAGE #23 OUTPUT ${currentStage.result}"
            }
        }
        
        // STAGE 24: DOCKER COMPOSE CLEAN
        stage('disaggregated-down-v1') {
            when{
                allOf{
                    anyOf{
                        expression{env.SNAP_NAME == 'oai-ran'}
                        expression{env.SNAP_NAME == 'oai-hss'}
                        expression{env.SNAP_NAME == 'oai-mme'}
                        expression{env.SNAP_NAME == 'oai-spgw'}
                    }
                    expression{env.OAI_SNAP_VERSION == 'v1'}
                }
            }
            steps {
                echo "STEP #24.1: Rollback the docker-compse"
                // Change the directory to an specific one for the compose
                dir("${dockerComposeLteDisaggregatedV1}"){
                    script{
                        try{
                            // Rollback
                            echo "Shutting down the docker-compose"
                            sh(
                                label: 'list the docker containers to see the deployed networks',
                                script: '''
                                    docker-compose down
                                '''
                            )
                            currentStage.result = 'SUCCESS'
                        } catch (err){
                            error("Failed to make the network, disaggregated mode v1, down. Check the docker-compose")
                            currentStage.result = 'FAILURE'
                        }
                    }
                }

                echo "STAGE #24 OUTPUT ${currentStage.result}"

            }
        }
        /*=========== Continuous deployment: lte network with monolithic RAN and disaggregated CN:v2 ===========*/
        // STAGE #25: DOCKER COMPOSE
        stage('disaggregated-deploy-v2') {
            when{
                anyOf{                
                    expression{env.SNAP_NAME == 'oai-ran'}
                    allOf{
                        expression{env.OAI_SNAP_VERSION == 'v2'}
                        anyOf{
                            expression{env.SNAP_NAME == 'oai-hss'}
                            expression{env.SNAP_NAME == 'oai-mme'}
                            expression{env.SNAP_NAME == 'oai-spgwc'}
                            expression{env.SNAP_NAME == 'oai-spgwu'}
                        }
                    }
                }
            }
            steps {
                echo "STEP #25.1 Build the docker hook"
                // Change the directory to an specific one for the compose
                dir("${dockerComposeLteDisaggregatedV2}"){
                    echo "STEP #25.2 bring the network down if it is already up"
                    script{
                        try{
                            // Remove the docker-compose if available
                            echo "Remove the docker-compose"
                            sh(
                                label: 'remove the docker compose if it is previously deployed',
                                script: '''
                                    docker-compose down
                                '''
                            )
                            currentStage.result = 'SUCCESS'
                        } catch (err) {
                        echo err.getMessage()
                            error("Failed to make the network, disaggregated v2, down. Check the docker compse.")
                            currentStage.result = 'FAILURE'
                        }
                    }
                    script{
                        try{
                            // Setup the docker-compse
                            echo "Running the docker-compose"
                            sh(
                                label: 'setup the docker-compose',
                                script: '''
                                    docker-compose up -d
                                '''
                            )
                            currentStage.result = 'SUCCESS'
                        } catch (err) {
                        echo err.getMessage()
                            error("Failed to make the network, disaggregated v2, up. Check the docker compse.")
                            currentStage.result = 'FAILURE'
                        }   
                    }
                }

                echo "STAGE #25 OUTPUT ${currentStage.result}"
            }
        }
        
        // STAGE #26: DOCKER COMPOSE TEST
        stage('disaggregated-network-test-v2') {
            when{
                anyOf{                
                    expression{env.SNAP_NAME == 'oai-ran'}
                    allOf{
                        expression{env.OAI_SNAP_VERSION == 'v2'}
                        anyOf{
                            expression{env.SNAP_NAME == 'oai-hss'}
                            expression{env.SNAP_NAME == 'oai-mme'}
                            expression{env.SNAP_NAME == 'oai-spgwc'}
                            expression{env.SNAP_NAME == 'oai-spgwu'}
                        }
                    }
                }
            }
            steps {
                echo "STEP #26.1 Test lte network: disaggregated mode"
                // Change the directory to an specific one for the compose
                dir("${dockerComposeLteDisaggregatedV2}"){
                    script{
                        try{
                            // List and check the containers and snaps
                            echo "Listing the containers and snaps"
                            sh(
                                label: 'list the docker containers to see the deployed networks',
                                script: '''
                                    # Sleep  for 10 seconds to make sure that the network is up
                                    sleep 10
                                    docker ps
                                    docker network ls
                                    
                                    cmd="snap list"
                                    cmd_info_ran="snap info oai-ran"
                                    cmd_info_hss="snap info oai-hss"
                                    cmd_info_mme="snap info oai-mme"
                                    cmd_info_spgwc="snap info oai-spgwc"
                                    cmd_info_spgwu="snap info oai-spgwu"

                                    docker exec oaihss $cmd
                                    docker exec oaihss $cmd_info_hss

                                    docker exec oaimme $cmd
                                    docker exec oaimme $cmd_info_mme

                                    docker exec oaispgwc $cmd
                                    docker exec oaispgwc $cmd_info_spgwc

                                    docker exec oaispgwu $cmd
                                    docker exec oaispgwu $cmd_info_spgwu

                                    docker exec oairan $cmd
                                    docker exec oairan $cmd_info_ran
                                '''
                            )
                            currentStage.result = 'SUCCESS'
                        } catch (err){
                            error("Failed to test the network, disaggregated v2")
                            currentStage.result = 'FAILURE'
                        }
                    }
                }

                echo "STAGE #26 OUTPUT ${currentStage.result}"
            }
        }
        
        // STAGE 27: DOCKER COMPOSE CLEAN
        stage('disaggregated-down-v2') {
            when{
                anyOf{                
                    expression{env.SNAP_NAME == 'oai-ran'}
                    allOf{
                        expression{env.OAI_SNAP_VERSION == 'v2'}
                        anyOf{
                            expression{env.SNAP_NAME == 'oai-hss'}
                            expression{env.SNAP_NAME == 'oai-mme'}
                            expression{env.SNAP_NAME == 'oai-spgwc'}
                            expression{env.SNAP_NAME == 'oai-spgwu'}
                        }
                    }
                }
            }
            steps {
                echo "STEP #27.1: Rollback the docker-compse"
                // Change the directory to an specific one for the compose
                dir("${dockerComposeLteDisaggregatedV2}"){
                    script{
                        try{
                            // Rollback
                            echo "Shutting down the docker-compose"
                            sh(
                                label: 'list the docker containers to see the deployed networks',
                                script: '''
                                    docker-compose down
                                '''
                            )
                            currentStage.result = 'SUCCESS'
                        } catch (err){
                            error("Failed to make the network, disaggregated v2, down. Check the docker-compose")
                            currentStage.result = 'FAILURE'
                        }
                    }
                }

                echo "STAGE #27 OUTPUT ${currentStage.result}"
            }
        }
    }
}
