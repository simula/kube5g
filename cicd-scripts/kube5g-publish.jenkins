/*
#!/bin/groovy
###############################################################################
Licensed to the Mosaic5G under one or more contributor license
agreements. See the NOTICE file distributed with this
work for additional information regarding copyright ownership.
The Mosaic5G licenses this file to You under the
Apache License, Version 2.0  (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
 
   	http://www.apache.org/licenses/LICENSE-2.0
  
  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-------------------------------------------------------------------------------
  For more information about the Mosaic5G:
  	contact@mosaic-5g.io
###############################################################################
file    kube5g-publish.jenkins
brief   This peline is for publishing the snaps and docker to the official channels, since all of them passed the test successfully
authors - Osama Arouk (C) - 2021 osama.arouk@eurecom.fr
        - 
*/

// Name of the snap to build; oai-ran, oai-hss, oai-mme, flexran, etc.
def snapName = params.snapName
// This is related to oai-cn versions: v1 and v2
def oaiSnapVersion = params.oaiSnapVersion

// snapcraft channel to which the snap will be pushed for testing it later. This channel is ONLY for testing (i.e., private channel)
def snapChannelCicd = params.snapChannelCicd
def dockerImageTagCicd = params.dockerImageTagCicd
def dockerRegisteryCicd = params.dockerRegisteryCicd
def dockerRegisteryTypeCicd = params.dockerRegisteryTypeCicd

// snapcraft channel to which the finall version of snap will be pushed. This is the public channel (i.e., private channel)
def snapChannel = params.snapChannel
def dockerImageTag = params.dockerImageTag
def dockerRegistery = params.dockerRegistery
def dockerRegisteryType = params.dockerRegisteryType

// Credentials
def gitlabCredentials   = 'mosaic5g_jenkins'

// def nodeExecutor = params.nodeExecutor
def nodeExecutor = 'cigarier'//params.nodeExecutor

// Name of docker image for the concerned snap. it is the same as the snap name but without hyphen (-)
def dockerEntityName = ''
String[] str
str = (params.snapName).split('-')
for ( String values : str ) {
    dockerEntityName = dockerEntityName + values
}

// Define counter for the stages and steps
def ENUM_STAGE  = 1
def ENUM_STEP   = 1
def EXIT_STAGE  = 0
pipeline {
    // Here we define the node that will run this script using the labels assigned to them previously
    agent {
        node {
            label nodeExecutor
        }
    }

    environment {
        SNAP_NAME = "${snapName}"
        SNAP_VERSION = "${oaiSnapVersion}"
        // For CICD
        SNAP_CHANNEL_CICD       = "${snapChannelCicd}"
        DOCKER_IMAGE_TAG_CICD= "${dockerImageTagCicd}"
        DOCKER_REGISTRY_CICD    = "${dockerRegisteryCicd}"
        DOCKER_REGISTRY_TYPE_CICD    = "${dockerRegisteryTypeCicd}"
        // For stabel channels: snap and docker
        SNAP_CHANNEL            = "${snapChannel}"
        DOCKER_IMAGE_TAG     = "${dockerImageTag}${currentBuild.number}"
        DOCKER_REGISTRY         = "${dockerRegistery}"
        DOCKER_REGISTRY_TYPE         = "${dockerRegisteryType}" 
        DOCKER_ENTITY_NAME         = "${dockerEntityName}"  
        
        
        // The following are for building kube5G
        KUBE5G_RDIR_DOCKER_HOOK = "dockers/docker-hook/cmd/hook"
        KUBE5G_RDIR_DOCKER_BUILD = "dockers/docker-build/build"
    }
    // 

    // Define the stages
    stages {
        
        // Clone the project from git: Source Control Management (SCM)
        stage('clone-scm') {
            steps {
                checkout scm
            }
        } 
        
        // Publish snap
        stage('snap-publish') {
            steps {
                script{
                    ENUM_STAGE = ENUM_STAGE + 1
                    echo "STAGE#$ENUM_STAGE: Publish the snap"
                    try{
                        sh(
                            label: '',
                            script: '''
                                snap_revision=$(snapcraft   list-revisions ${SNAP_NAME}|head -n 2|tail -n 1 | cut -f 1 -d " ")
                                snapcraft release ${SNAP_NAME} ${snap_revision} ${SNAP_CHANNEL}
                            '''
                        )
                    } catch (err) {
                        // throw(err)
                        echo err.getMessage()
                        catchError(buildResult: 'FAILURE', stageResult: 'FAILURE') {
                            echo err.getMessage()
                            sh "exit 1"
                        }
                    }
                }
            }
        }
        // 
        // Push the docker image to docker-hub
        stage('docker-Push') {
            steps {                
                script{
                    ENUM_STAGE = ENUM_STAGE + 1
                    echo "STAGE#$ENUM_STAGE: publish the docker image tagged as ${DOCKER_IMAGE_TAG} to docker-hub"
                    
                    ENUM_STEP = 1
                    echo "STEP#$ENUM_STAGE.$ENUM_STEP: Tag the docker image"
                    try {
                        // tag the image tested with ci/cd to the tag to be published
                        sh 'docker tag ${DOCKER_REGISTRY_CICD}/${DOCKER_ENTITY_NAME}:${DOCKER_IMAGE_TAG_CICD} ${DOCKER_REGISTRY}/${DOCKER_ENTITY_NAME}:${DOCKER_IMAGE_TAG}'
                    } catch (err) {
                        throw(err)
                    }

                    try {
                        if ("${DOCKER_REGISTRY_TYPE_CICD}" == "docker"){
                            //Remote Registry
                            sh 'echo "jenkins" | gnome-keyring-daemon -r -d --unlock'
                            docker.withRegistry('https://index.docker.io/v1/', "${dockerHubCredentials}") {
                                    docker.image("${DOCKER_REGISTRY}/${DOCKER_ENTITY_NAME}:${DOCKER_IMAGE_TAG}").push("${DOCKER_IMAGE_TAG}")
                                    docker.image("${DOCKER_REGISTRY}/${DOCKER_ENTITY_NAME}:${DOCKER_IMAGE_TAG}").push()
                            }
                        }else{
                            //Local Registry
                            sh 'echo "jenkins" | gnome-keyring-daemon -r -d --unlock'
                            dockerImage = docker.image('${DOCKER_REGISTRY}/${DOCKER_ENTITY_NAME}:${DOCKER_IMAGE_TAG}')
                            docker.withRegistry('https://${DOCKER_REGISTRY}/v1/') {
                                    dockerImage.push()
                            }
                        }

                    } catch (err) {
                        throw(err)
                    }
                }
            }
        }


    }
    post {
        always{
            echo 'Sending Email'
            emailext attachLog: true, compressLog: false,
                subject: "[Kube5G pipeline] ${currentBuild.fullDisplayName}: ${currentBuild.result}",
                to: "mosaic.5gecosys@gmail.com",
                replyTo: "kubernex@lists.eurecom.fr",
                body: '''Hi,
                
                Find attached the build's log. You can check your pipeline at ${env.BUILD_URL}
                
                Regards
                Kube5G team
                '''
        }
        cleanup {
            // clean up the workspace
            deleteDir()
            // remove the tmp directory
            dir("${workspace}@tmp") {
                deleteDir()
            }
        }
    }
}